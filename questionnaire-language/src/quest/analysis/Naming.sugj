package quest.analysis;

import quest.lang.Syntax;

public extension Naming {
  rules
    is-reference = where(get-analysis-data(|"reference"))
    is-reference-to(|t) = where(retrieve-reference; equal(|t)) 
    retrieve-reference = get-analysis-data(|"reference")
    put-reference(|t) = where(try(remove-analysis-data(|"name-error")))
                      ; put-analysis-data(|"reference", t)
    
    has-name-error = where(get-analysis-data(|"name-error"))
    retrieve-name-error = get-analysis-data(|"name-error")
    put-name-error(|t) = put-analysis-data(|"name-error", t)
    
  analyses 
    {| LocalQuest, ActiveQuest: analyze-names |}
  
  rules
    analyze-names = ?Questionnaire(_,_,_); ?x; populate-names-from-interfaces ; !x; Questionnaire(id, id, analyze-names) ; debug(!"end naming")
    analyze-names = QNil
    analyze-names = QCons(analyze-names, analyze-names)
    
    analyze-names = ?Question(_, QuestId(name), _); new-active-name(|name) 
    analyze-names =
      ?DerivedValue(_, QuestId(name), body);
      where(<analyze-expr-names> body);
      new-active-name(|name)
    analyze-names = QuestGroup(id, analyze-names)
    analyze-names = ConditionalQuest(analyze-expr-names, analyze-names-local-scope, ?None + Some(analyze-names-local-scope))
    analyze-names = ?LocalQuest(Question(_, QuestId(name), _)); new-local-name(|name)
    analyze-names =
      ?QuestRef(QuestId(name)); 
      if <LocalQuest> name => ref
        then where(<put-reference(|ref)> name)
        else where(<put-name-error(|"Could not resolve reference.")> name)
      end;
      new-active-name(|name)

    analyze-names =
      ?ExternalRef(Id(mname), Id(name));
      if <LocalQuest> (mname, name) => ref
        then where(<put-reference(|ref)> name)
        else where(<put-name-error(|"Could not resolve external reference.")> name)
      end;
      new-active-name(|name)

    analyze-names-local-scope = {| LocalQuest: analyze-names |}
    
  rules
    analyze-expr-names = topdown(try(analyze-expr-name))
    analyze-expr-name =
      ?ExprName(Id(name)); 
      if <ActiveQuest> name => ref
        then where(<put-reference(|ref)> name)
        else where(<put-name-error(|"Could not resolve reference.")> name)
      end
      
  rules
    new-local-name(|name) = ?t; rules ( LocalQuest : name -> t) 
    new-active-name(|name) = ?t; rules ( ActiveQuest : name -> t) 


  rules
    constraint-error =
      where(retrieve-name-error => err);
      !(<id>,<conc-strings>("Naming error: ", err))
      
    resolve-reference : (node, position, ast, path, project-path) -> definition
      where
        <find-analysis-data(retrieve-reference)> node => definition
    
    find-analysis-data(s) = s <+ ?c#([<find-analysis-data(s)>])
    
    references-are-resolved = oncetd((?QuestRef(QuestId(<id>)) + ?ExprName(Id(<id>)));
                                     (is-reference + has-name-error))
                           <+ topdown(not(?QuestRef(_) + ?ExprName(_)))

  references
    reference _ : resolve-reference

  // import support using interfaces
  signature
    constructors
      IQuestionaire : Modifiers * String * Body -> InterfaceComponent
      IQuestion : String * String * String -> InterfaceComponent
      IQuestGroup : String * Body -> InterfaceComponent
      IValue : String * QuestId -> InterfaceComponent
  rules
    imported-interfaces = prim("SUGARJ_imported_interfaces") ; debug(!"interfaces: ")

  rules
    populate-names-from-interfaces = ?old; imported-interfaces ; ?ifcs; <filter(populate-names-from-interface)> ifcs ; !old
    populate-names-from-interface: (_, Interface(ifc)) -> <map(populate-names-from-interface)> ifc
    populate-names-from-interface: ("quest", IQuestionaire(_, mname, ifc)) -> <map(names-from-interface(|mname))> ifc
    populate-names-from-interface = debug(!"what's that? ")

  rules
    names-from-interface(|mname) = ?IQuestion(type, name, text); new-local-name(|(mname, name)); put-analysis-data(|"type", type)
    names-from-interface(|mname) = ?IValue(type, name); new-local-name(|(mname, name)); put-analysis-data(|"type", type)
    names-from-interface(|mname) = ?IQuestGroup(name, body); <filter(names-from-interface(|mname))> body
    names-from-interface = debug(!"what's that? ")
}
