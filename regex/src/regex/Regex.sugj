package regex;

/*
 * http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
 */
public sugar Regex {
  sorts Regex RegexLit CCExp CCExpLit CCExpRange

  lexical syntax
    [a-z] -> LCChar
    [A-Z] -> UCChar
    [0-9] -> Digit

    "\\" [\\tnrfae\.\-\@\+] -> EscapedChar

  
  // character class literals and ranges
  lexical syntax
    [a-zA-Z0-9\ ]     -> CCExpLit
    EscapedChar -> CCExpLit
    
    "."   -> CCPredefined
    "\\s" -> CCPredefined
    "\\S" -> CCPredefined
    "\\d" -> CCPredefined
    "\\D" -> CCPredefined
    "\\w" -> CCPredefined
    "\\W" -> CCPredefined
    
  syntax
    <CCExpLit-LEX>    -> CCExp {cons("ccexp-lit")}
    <LCChar-LEX> "-" <LCChar-LEX> -> CCExp {cons("ccexp-range")}
    <UCChar-LEX> "-" <UCChar-LEX> -> CCExp {cons("ccexp-range")}
    <Digit-LEX>  "-" <Digit-LEX>  -> CCExp {cons("ccexp-range")}
    "^" CCExp         -> CCExp {cons("ccexp-negation")}
    CCExp CCExp       -> CCExp {left, cons("ccexp-union")}
    CCExp "&&" CCExp  -> CCExp {left, cons("ccexp-intersection")}
    "[" CCExp "]"     -> CCExp {bracket}
    <CCPredefined-LEX> -> CCExp {cons("ccexp-predefined")}

  priorities // of character class operators
    <CCExpLit-LEX>    -> CCExp {cons("ccexp-lit")}
  > "^" CCExp         -> CCExp {cons("ccexp-negation")}
  > "[" CCExp "]"     -> CCExp {bracket}
  > {
     <LCChar-LEX> "-" <LCChar-LEX> -> CCExp {cons("ccexp-range")}
     <UCChar-LEX> "-" <UCChar-LEX> -> CCExp {cons("ccexp-range")}
     <Digit-LEX>  "-" <Digit-LEX>  -> CCExp {cons("ccexp-range")}
    }
  > CCExp CCExp       -> CCExp {left, cons("ccexp-union")}
  > CCExp "&&" CCExp  -> CCExp {left, cons("ccexp-intersection")}
  

  // regex literals
  lexical syntax
    [a-zA-Z0-9\ ]   -> RegexLit
    EscapedChar -> RegexLit
    
  
  // regular expressions
  syntax
    "/" Regex "/"   -> <Regex-CF> {cons("delimited-regex")}
  
	  <RegexLit-LEX>  -> Regex {cons("regex-lit")}
	  "[" CCExp "]"   -> Regex {bracket, cons("regex-ccexp")}
	  <CCPredefined-LEX> -> Regex {bracket, cons("regex-ccexp-predefined")}
	  Regex "?"       -> Regex {cons("regex-option")}
	  Regex "*"       -> Regex {cons("regex-many")}
	  Regex "+"       -> Regex {cons("regex-many1")}
	  Regex Regex     -> Regex {left, cons("regex-sequence")}
	  Regex "|" Regex -> Regex {left, cons("regex-alternative")}
	  "(" Regex ")"   -> Regex {bracket, cons("regex-group")}
  
  priorities // of logical operators
    <RegexLit-LEX>  -> Regex {cons("regex-lit")}
  > {
    Regex "?"       -> Regex {cons("regex-option")}
    Regex "*"       -> Regex {cons("regex-many")}
    Regex "+"       -> Regex {cons("regex-many1")}
    }
  > Regex Regex     -> Regex {left, cons("regex-sequence")}
  > Regex "|" Regex -> Regex {left, cons("regex-alternative")}
  
}
